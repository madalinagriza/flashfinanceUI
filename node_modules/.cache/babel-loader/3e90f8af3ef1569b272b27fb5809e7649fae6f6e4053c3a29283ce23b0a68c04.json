{"ast":null,"code":"/**\n * WCAG 3.0 APCA perceptual contrast algorithm from https://github.com/Myndex/SAPC-APCA\n * @licence https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n * @see https://www.w3.org/WAI/GL/task-forces/silver/wiki/Visual_Contrast_of_Text_Subgroup\n */\n\n// MAGICAL NUMBERS\n\n// sRGB Conversion to Relative Luminance (Y)\n\n// Transfer Curve (aka \"Gamma\") for sRGB linearization\n// Simple power curve vs piecewise described in docs\n// Essentially, 2.4 best models actual display\n// characteristics in combination with the total method\nvar mainTRC = 2.4;\nvar Rco = 0.2126729; // sRGB Red Coefficient (from matrix)\nvar Gco = 0.7151522; // sRGB Green Coefficient (from matrix)\nvar Bco = 0.0721750; // sRGB Blue Coefficient (from matrix)\n\n// For Finding Raw SAPC Contrast from Relative Luminance (Y)\n\n// Constants for SAPC Power Curve Exponents\n// One pair for normal text, and one for reverse\n// These are the \"beating heart\" of SAPC\nvar normBG = 0.55;\nvar normTXT = 0.58;\nvar revTXT = 0.57;\nvar revBG = 0.62;\n\n// For Clamping and Scaling Values\n\nvar blkThrs = 0.03; // Level that triggers the soft black clamp\nvar blkClmp = 1.45; // Exponent for the soft black clamp curve\nvar deltaYmin = 0.0005; // Lint trap\nvar scaleBoW = 1.25; // Scaling for dark text on light\nvar scaleWoB = 1.25; // Scaling for light text on dark\nvar loConThresh = 0.078; // Threshold for new simple offset scale\nvar loConFactor = 12.82051282051282; // = 1/0.078,\nvar loConOffset = 0.06; // The simple offset\nvar loClip = 0.001; // Output clip (lint trap #2)\n\nexport function APCAcontrast(text, background) {\n  // Linearize sRGB\n  var Rtxt = Math.pow((text >> 16 & 0xff) / 255, mainTRC);\n  var Gtxt = Math.pow((text >> 8 & 0xff) / 255, mainTRC);\n  var Btxt = Math.pow((text >> 0 & 0xff) / 255, mainTRC);\n  var Rbg = Math.pow((background >> 16 & 0xff) / 255, mainTRC);\n  var Gbg = Math.pow((background >> 8 & 0xff) / 255, mainTRC);\n  var Bbg = Math.pow((background >> 0 & 0xff) / 255, mainTRC);\n\n  // Apply the standard coefficients and sum to Y\n  var Ytxt = Rtxt * Rco + Gtxt * Gco + Btxt * Bco;\n  var Ybg = Rbg * Rco + Gbg * Gco + Bbg * Bco;\n\n  // Soft clamp Y when near black.\n  // Now clamping all colors to prevent crossover errors\n  if (Ytxt <= blkThrs) Ytxt += Math.pow(blkThrs - Ytxt, blkClmp);\n  if (Ybg <= blkThrs) Ybg += Math.pow(blkThrs - Ybg, blkClmp);\n\n  // Return 0 Early for extremely low ∆Y (lint trap #1)\n  if (Math.abs(Ybg - Ytxt) < deltaYmin) return 0.0;\n\n  // SAPC CONTRAST\n\n  var outputContrast; // For weighted final values\n  if (Ybg > Ytxt) {\n    // For normal polarity, black text on white\n    // Calculate the SAPC contrast value and scale\n\n    var SAPC = (Math.pow(Ybg, normBG) - Math.pow(Ytxt, normTXT)) * scaleBoW;\n\n    // NEW! SAPC SmoothScale™\n    // Low Contrast Smooth Scale Rollout to prevent polarity reversal\n    // and also a low clip for very low contrasts (lint trap #2)\n    // much of this is for very low contrasts, less than 10\n    // therefore for most reversing needs, only loConOffset is important\n    outputContrast = SAPC < loClip ? 0.0 : SAPC < loConThresh ? SAPC - SAPC * loConFactor * loConOffset : SAPC - loConOffset;\n  } else {\n    // For reverse polarity, light text on dark\n    // WoB should always return negative value.\n\n    var _SAPC = (Math.pow(Ybg, revBG) - Math.pow(Ytxt, revTXT)) * scaleWoB;\n    outputContrast = _SAPC > -loClip ? 0.0 : _SAPC > -loConThresh ? _SAPC - _SAPC * loConFactor * loConOffset : _SAPC + loConOffset;\n  }\n  return outputContrast * 100;\n}","map":{"version":3,"names":["mainTRC","Rco","Gco","Bco","normBG","normTXT","revTXT","revBG","blkThrs","blkClmp","deltaYmin","scaleBoW","scaleWoB","loConThresh","loConFactor","loConOffset","loClip","APCAcontrast","text","background","Rtxt","Math","pow","Gtxt","Btxt","Rbg","Gbg","Bbg","Ytxt","Ybg","abs","outputContrast","SAPC"],"sources":["../../../src/util/color/APCA.ts"],"sourcesContent":["/**\n * WCAG 3.0 APCA perceptual contrast algorithm from https://github.com/Myndex/SAPC-APCA\n * @licence https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n * @see https://www.w3.org/WAI/GL/task-forces/silver/wiki/Visual_Contrast_of_Text_Subgroup\n */\n\n// MAGICAL NUMBERS\n\n// sRGB Conversion to Relative Luminance (Y)\n\n// Transfer Curve (aka \"Gamma\") for sRGB linearization\n// Simple power curve vs piecewise described in docs\n// Essentially, 2.4 best models actual display\n// characteristics in combination with the total method\nconst mainTRC = 2.4\n\nconst Rco = 0.2126729 // sRGB Red Coefficient (from matrix)\nconst Gco = 0.7151522 // sRGB Green Coefficient (from matrix)\nconst Bco = 0.0721750 // sRGB Blue Coefficient (from matrix)\n\n// For Finding Raw SAPC Contrast from Relative Luminance (Y)\n\n// Constants for SAPC Power Curve Exponents\n// One pair for normal text, and one for reverse\n// These are the \"beating heart\" of SAPC\nconst normBG = 0.55\nconst normTXT = 0.58\nconst revTXT = 0.57\nconst revBG = 0.62\n\n// For Clamping and Scaling Values\n\nconst blkThrs = 0.03 // Level that triggers the soft black clamp\nconst blkClmp = 1.45 // Exponent for the soft black clamp curve\nconst deltaYmin = 0.0005 // Lint trap\nconst scaleBoW = 1.25 // Scaling for dark text on light\nconst scaleWoB = 1.25 // Scaling for light text on dark\nconst loConThresh = 0.078 // Threshold for new simple offset scale\nconst loConFactor = 12.82051282051282 // = 1/0.078,\nconst loConOffset = 0.06 // The simple offset\nconst loClip = 0.001 // Output clip (lint trap #2)\n\nexport function APCAcontrast (text: number, background: number) {\n  // Linearize sRGB\n  const Rtxt = ((text >> 16 & 0xff) / 255) ** mainTRC\n  const Gtxt = ((text >> 8 & 0xff) / 255) ** mainTRC\n  const Btxt = ((text >> 0 & 0xff) / 255) ** mainTRC\n\n  const Rbg = ((background >> 16 & 0xff) / 255) ** mainTRC\n  const Gbg = ((background >> 8 & 0xff) / 255) ** mainTRC\n  const Bbg = ((background >> 0 & 0xff) / 255) ** mainTRC\n\n  // Apply the standard coefficients and sum to Y\n  let Ytxt = (Rtxt * Rco) + (Gtxt * Gco) + (Btxt * Bco)\n  let Ybg = (Rbg * Rco) + (Gbg * Gco) + (Bbg * Bco)\n\n  // Soft clamp Y when near black.\n  // Now clamping all colors to prevent crossover errors\n  if (Ytxt <= blkThrs) Ytxt += (blkThrs - Ytxt) ** blkClmp\n  if (Ybg <= blkThrs) Ybg += (blkThrs - Ybg) ** blkClmp\n\n  // Return 0 Early for extremely low ∆Y (lint trap #1)\n  if (Math.abs(Ybg - Ytxt) < deltaYmin) return 0.0\n\n  // SAPC CONTRAST\n\n  let outputContrast: number // For weighted final values\n  if (Ybg > Ytxt) {\n    // For normal polarity, black text on white\n    // Calculate the SAPC contrast value and scale\n\n    const SAPC = ((Ybg ** normBG) - (Ytxt ** normTXT)) * scaleBoW\n\n    // NEW! SAPC SmoothScale™\n    // Low Contrast Smooth Scale Rollout to prevent polarity reversal\n    // and also a low clip for very low contrasts (lint trap #2)\n    // much of this is for very low contrasts, less than 10\n    // therefore for most reversing needs, only loConOffset is important\n    outputContrast =\n      (SAPC < loClip) ? 0.0\n      : (SAPC < loConThresh) ? SAPC - SAPC * loConFactor * loConOffset\n      : SAPC - loConOffset\n  } else {\n    // For reverse polarity, light text on dark\n    // WoB should always return negative value.\n\n    const SAPC = ((Ybg ** revBG) - (Ytxt ** revTXT)) * scaleWoB\n\n    outputContrast =\n      (SAPC > -loClip) ? 0.0\n      : (SAPC > -loConThresh) ? SAPC - SAPC * loConFactor * loConOffset\n      : SAPC + loConOffset\n  }\n\n  return outputContrast * 100\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}