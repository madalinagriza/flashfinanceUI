{"ast":null,"code":"import { clamp } from \"../../util/helpers.mjs\"; // For converting XYZ to sRGB\nvar srgbForwardMatrix = [[3.2406, -1.5372, -0.4986], [-0.9689, 1.8758, 0.0415], [0.0557, -0.2040, 1.0570]];\n\n// Forward gamma adjust\nvar srgbForwardTransform = function srgbForwardTransform(C) {\n  return C <= 0.0031308 ? C * 12.92 : 1.055 * Math.pow(C, 1 / 2.4) - 0.055;\n};\n\n// For converting sRGB to XYZ\nvar srgbReverseMatrix = [[0.4124, 0.3576, 0.1805], [0.2126, 0.7152, 0.0722], [0.0193, 0.1192, 0.9505]];\n\n// Reverse gamma adjust\nvar srgbReverseTransform = function srgbReverseTransform(C) {\n  return C <= 0.04045 ? C / 12.92 : Math.pow((C + 0.055) / 1.055, 2.4);\n};\nexport function fromXYZ(xyz) {\n  var rgb = Array(3);\n  var transform = srgbForwardTransform;\n  var matrix = srgbForwardMatrix;\n\n  // Matrix transform, then gamma adjustment\n  for (var i = 0; i < 3; ++i) {\n    rgb[i] = Math.round(clamp(transform(matrix[i][0] * xyz[0] + matrix[i][1] * xyz[1] + matrix[i][2] * xyz[2])) * 255);\n  }\n\n  // Rescale back to [0, 255]\n  return (rgb[0] << 16) + (rgb[1] << 8) + (rgb[2] << 0);\n}\nexport function toXYZ(rgb) {\n  var xyz = [0, 0, 0];\n  var transform = srgbReverseTransform;\n  var matrix = srgbReverseMatrix;\n\n  // Rescale from [0, 255] to [0, 1] then adjust sRGB gamma to linear RGB\n  var r = transform((rgb >> 16 & 0xff) / 255);\n  var g = transform((rgb >> 8 & 0xff) / 255);\n  var b = transform((rgb >> 0 & 0xff) / 255);\n\n  // Matrix color space transform\n  for (var i = 0; i < 3; ++i) {\n    xyz[i] = matrix[i][0] * r + matrix[i][1] * g + matrix[i][2] * b;\n  }\n  return xyz;\n}","map":{"version":3,"names":["clamp","srgbForwardMatrix","srgbForwardTransform","C","Math","pow","srgbReverseMatrix","srgbReverseTransform","fromXYZ","xyz","rgb","Array","transform","matrix","i","round","toXYZ","r","g","b"],"sources":["../../../src/util/color/transformSRGB.ts"],"sourcesContent":["import type { ColorInt, XYZ } from '../colorUtils'\nimport { clamp } from '../../util/helpers'\n\n// For converting XYZ to sRGB\nconst srgbForwardMatrix = [\n  [3.2406, -1.5372, -0.4986],\n  [-0.9689, 1.8758, 0.0415],\n  [0.0557, -0.2040, 1.0570],\n]\n\n// Forward gamma adjust\nconst srgbForwardTransform = (C: number): number => (\n  C <= 0.0031308\n    ? C * 12.92\n    : 1.055 * C ** (1 / 2.4) - 0.055\n)\n\n// For converting sRGB to XYZ\nconst srgbReverseMatrix = [\n  [0.4124, 0.3576, 0.1805],\n  [0.2126, 0.7152, 0.0722],\n  [0.0193, 0.1192, 0.9505],\n]\n\n// Reverse gamma adjust\nconst srgbReverseTransform = (C: number): number => (\n  C <= 0.04045\n    ? C / 12.92\n    : ((C + 0.055) / 1.055) ** 2.4\n)\n\nexport function fromXYZ (xyz: XYZ): ColorInt {\n  const rgb = Array(3)\n  const transform = srgbForwardTransform\n  const matrix = srgbForwardMatrix\n\n  // Matrix transform, then gamma adjustment\n  for (let i = 0; i < 3; ++i) {\n    rgb[i] = Math.round(clamp(transform(\n      matrix[i][0] * xyz[0] +\n      matrix[i][1] * xyz[1] +\n      matrix[i][2] * xyz[2]\n    )) * 255)\n  }\n\n  // Rescale back to [0, 255]\n  return (rgb[0] << 16) + (rgb[1] << 8) + (rgb[2] << 0)\n}\n\nexport function toXYZ (rgb: ColorInt): XYZ {\n  const xyz: XYZ = [0, 0, 0]\n  const transform = srgbReverseTransform\n  const matrix = srgbReverseMatrix\n\n  // Rescale from [0, 255] to [0, 1] then adjust sRGB gamma to linear RGB\n  const r = transform((rgb >> 16 & 0xff) / 255)\n  const g = transform((rgb >> 8 & 0xff) / 255)\n  const b = transform((rgb >> 0 & 0xff) / 255)\n\n  // Matrix color space transform\n  for (let i = 0; i < 3; ++i) {\n    xyz[i] = matrix[i][0] * r + matrix[i][1] * g + matrix[i][2] * b\n  }\n\n  return xyz\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}